# ################################
#
# Notes about register names and function args:
#
#   Function args are passed in a0 - a3, which are the same as $4 - $7, other args are on the stack
#
#   Function return values are stored in v0 (and v1 if the regs are 32-bit and return type is 64-bits)
#     v0 and v1 are the same as general purpose regs $2 and $3
#
#   $29 is the stack pointer sp
#   $30 is the frame pointer fp also called s8
#   $31 is the return address ra
#
# ################################
#
# When you have a 64-bit longword integer:
#   For function return longword values:
#     $2 (same as v0) holds the MSB top half of the longword
#     $3 (same as v1) holds the LSB bottom half of the longword
#
# Note that when conversions are done to/from floats, doubles, ints, and longs (64-bit) that rounding
# errors can occur in the simulator, so equality comparisons should be done carefully.
#
# ################################

define endian=little;
define alignment=2;

define space ram type=ram_space size=4 default;
define space register type=register_space size=4;

# General purpose registers
define register offset=0 size=4 [ 
    zero at v0 v1 
    a0 a1 a2 a3 
    t0 t1 t2 t3 
    t4 t5 t6 t7 
    s0 s1 s2 s3 
    s4 s5 s6 s7 
    t8 t9 k0 k1 
    gp sp fp ra
    pc
];

# gte macroses calls special registers
define register offset=0x10000 size=4 [
	gte0  gte1  gte2  gte3  gte4  gte5  gte6  gte7
	gte8  gte9  gte10 gte11 gte12 gte13 gte14 gte15
];

# COP-0 control registers
define register offset=0x2000 size=4 [
    _               _               _               BPC
    _               BDA             PIDMASK         DCIC
    BadVAddr        BDAM            _               BPCM
    Status          Cause           EPC             PRId 
    _               _               _               _
    _               _               _               _
    _               _               _               _
    _               _               _               _
];

# Some other internal registers
define register offset=0x3000 size=4 [
    lo hi lo1 hi1 lo2 hi2 lo3 hi3
];

# Define context bits
define register offset=0x4000 size=4   contextreg;
define context contextreg
  PAIR_INSTRUCTION_FLAG=(0,0) noflow      # =1 paired instruction
;



# Instruction fields
define token instr(32)
    prime       = (26,31)
    bit25       = (25,25)
    zero2325    = (23,25)
    rs32        = (21,25)
    rs          = (21,25)
    rs1         = (21,25)
    rs2         = (21,25)
    base        = (21,25)
    base1       = (21,25)
    base2       = (21,25)
    base3       = (21,25)
    base4       = (21,25)
    base5       = (21,25)
    base6       = (21,25)
    base7       = (21,25)
    base8       = (21,25)
    base9       = (21,25)
    base10      = (21,25)
    base11      = (21,25)
    base12      = (21,25)
    base13      = (21,25)
    base14      = (21,25)
    base15      = (21,25)
    base16      = (21,25)
    copop       = (21,25)
    zero21      = (21,25)
    
    acf         = (21,22)
    acflo       = (21,22)
    acfhi       = (21,22)
    breakcode   = (6,25)
    ind26       = (0,25)			# 26 bit unsigned index, e.g. jal
    copfill     = (6,24)
    cofun       = (0,24)
    cop2_mvmva1 = (0,9)
    cop2_mvmva2 = (20,24)
    cop2_sf     = (19,19)
    cop2_mx     = (17,18)
    cop2_v      = (15,16)
    cop2_cv     = (13,14)
    cop2_lm     = (10,10)
    off16       = (0,15) signed		# 16 bit signed offset in conditional branch/link
    rt32        = (16,20)
    rt          = (16,20)
    rt1         = (16,20)
    rt2         = (16,20)
    rt3         = (16,20)
    rt4         = (16,20)
    hint        = (16,20)
    cond        = (16,20)
    zero1620    = (16,20)
    
    zero1320    = (13,20)
    zero1315    = (13,15)
    rd32        = (11,15)
    rd          = (11,15)
    rd1         = (11,15)
    rd2         = (11,15)
    rd0_0       = (11,15)
    
    aclo        = (11,12)
    achi        = (11,12)
    ac          = (11,12)
    sa          = (6,10)
    sa_1        = (6,10)
    sa_2        = (6,10)
    zero5       = (6,10)

    bigfunct    = (0,10)
    fct         = (0,5)
    immed       = (0,15)
    simmed      = (0,15) signed
;

attach variables [ rs rs32 rt rt32 rt1 rt2 rt3 rt4 rd rd32 base base1 base2 base3 base4 base5 base6 base7 base8 base9 base10 base11 base12 base13 base14 base15 base16 ] [ 
    zero  at  v0  v1  a0  a1  a2  a3
    t0    t1  t2  t3  t4  t5  t6  t7
    s0    s1  s2  s3  s4  s5  s6  s7
    t8    t9  k0  k1  gp  sp  fp  ra
];

attach variables [ rd0_0 ] [
    _               _               _               BPC
    _               BDA             PIDMASK         DCIC
    BadVAddr        BDAM            _               BPCM
    Status          Cause           EPC             PRId 
    _               _               _               _
    _               _               _               _
    _               _               _               _
    _               _               _               _
];

attach variables [ aclo acflo ] [ lo lo1 lo2 lo3 ];
attach variables [ achi acfhi ] [ hi hi1 hi2 hi3 ];

attach names hint [ 
    "load" "store" "hint2" "hint3" "load_streamed" "store_streamed" "load_retained" "store_retained"
    "hint8" "hint9" "hint10" "hint11" "hint12" "hint13" "hint14" "hint15"
    "hint16" "hint17" "hint18" "hint19" "hint20" "hint21" "hint22" "hint23" "hint24"
    "writeback_invalidate" "hint26" "hint27" "hint28" "hint29" "PrepareForStore" "hint31" ];

# Subconstructors
RD0: rd0_0        is rd0_0             { export rd0_0; }

RD: rd            is rd                { export rd; }
#RDsrc: rd         is rd                { export rd; }
#RDsrc: rd         is rd & rd=0         { export 0:4; }

#RS: rs            is rs                { export rs; }
RSsrc: rs         is rs                { export rs; }
RSsrc: rs         is rs & rs=0         { export 0:4; }

RT: rt            is rt                { export rt; }
RTsrc: rt         is rt                { export rt; }
RTsrc: rt         is rt & rt=0         { export 0:4; }

RT1: rt1          is rt1               { export rt1; }
RTsrc1: rt1       is rt1               { export rt1; }
RTsrc1: rt1       is rt1 & rt1=0       { export 0:4; }

RT2: rt2          is rt2               { export rt2; }
RTsrc2: rt2       is rt2               { export rt2; }
RTsrc2: rt2       is rt2 & rt2=0       { export 0:4; }

RT3: rt3          is rt3               { export rt3; }
RTsrc3: rt3       is rt3               { export rt3; }
RTsrc3: rt3       is rt3 & rt3=0       { export 0:4; }

RT4: rt4          is rt4               { export rt4; }
RTsrc4: rt4       is rt4               { export rt4; }
RTsrc4: rt4       is rt4 & rt4=0       { export 0:4; }

RD32: rd          is rd & rd32         { export rd32; }
RS32src: rs       is rs & rs32         { export rs32; }
RS32src: rs       is rs & rs32=0       { export 0:4; }
RT32: rt          is rt & rt32         { export rt32; }
RT32src: rt       is rt & rt32         { export rt32; }
RT32src: rt       is rt & rt32=0       { export 0:4; }

OFF_BASE: simmed(base)  is simmed & base    { tmp:4 = base + simmed; export tmp; }
Rel16: reloc            is off16	[ reloc=inst_start+4+4*off16; ]					{ export *:4 reloc; }
Abs26: reloc            is ind26	[ reloc=((inst_start+4) $and 0xfffffffff0000000) | 4*ind26; ]	{ export *:4 reloc; }

# Custom Pcode Operations
#
# To add a new pcodeop op that is implemented in Java code:
#
#   In this directory:
#     ./ghidra/Ghidra/Processors/MIPS/src/main/java/ghidra/program/emulation
#   Edit this file to register a new Java method that implements the pcodeop:
#     MIPSEmulateInstructionStateModifier.java
#   (Be sure to also import the new class)
#
#   The mips.pspec file must have this key set (this has already been done):
#     <property key="emulateInstructionStateModifierClass" value="ghidra.program.emulation.MIPSEmulateInstructionStateModifier"/>
#
#   Add the Java class file for the new pcodeop here:
#     ./ghidra/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother
#
define pcodeop break;
define pcodeop trap;
define pcodeop syscall;
define pcodeop signalReservedInstruction;

# getCopCondition(cop_num, cc)
define pcodeop getCopCondition;

# setCopControlWord(cop_num, reg_num, value)
define pcodeop setCopControlWord;

# getCopControlWord(cop_num, reg_num)
define pcodeop getCopControlWord;

# copFunction(cop_num, func)
define pcodeop copFunction;

# getCopReg(cop_num, reg_num)
define pcodeop getCopReg;

# setCopReg(cop_num, reg_num, value)
define pcodeop setCopReg;

# getHWRegister(reg, sel)
define pcodeop getHWRegister;
