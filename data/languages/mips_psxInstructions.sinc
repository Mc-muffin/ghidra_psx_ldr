############################
#
# MIPS32
# Basic and COP0 instructions
# 
############################

# 0000 00ss ssst tttt dddd d000 0010 0000
:add RD32, RS32src, RT32src           is prime=0 & sa=0 & fct=0x20 & RD32 & RS32src & RT32src & RD {
    RD32 = RS32src + RT32src;
}

# 0010 00ss ssst tttt iiii iiii iiii iiii
:addi RT32, RS32src, simmed         is prime=8 & RT32 & RS32src & simmed & RT {
    RT32 = RS32src + simmed;
}

# 0010 01ss ssst tttt iiii iiii iiii iiii
:addiu RT32, RS32src, simmed        is prime=9 & RT32 & RS32src & simmed & RT {
    RT32 = RS32src + simmed;
}

# 0000 00ss ssst tttt dddd d000 0010 0001
:addu RD32, RS32src, RT32src          is prime=0 & fct=0x21 & RS32src & RT32src & RD32 & sa=0 & RD {
    RD32 = RS32src + RT32src;
}

# 0000 00ss ssst tttt dddd d000 0010 0100
:and RD, RSsrc, RTsrc           is prime=0 & fct=0x24 & RSsrc & RTsrc & RD & sa=0 {
    RD = RSsrc & RTsrc; 
}

# 0011 00ss ssst tttt iiii iiii iiii iiii
:andi RT, RSsrc, immed          is prime=0xC & RSsrc & RT & immed {
    RT = RSsrc & immed; 
}

# 0001 0000 0000 0000 iiii iiii iiii iiii 
:b Rel16                        is prime=4 & rs=0 & rt=0 & Rel16 {
    delayslot(1); 
    goto Rel16; 
}

# 0000 01ss sss1 0001 iiii iiii iiii iiii
:bal Rel16            is prime=1 & cond=0x11 & rs=0 & Rel16 {
    ra = inst_next; 
    delayslot( 1 ); 
    call Rel16; 
}

# Special case PIC
:bal Rel16            is prime=1 & cond=0x11 & rs=0 & off16=1 & Rel16 {
    ra = inst_next; 
    delayslot( 1 ); 
    goto Rel16; 
}

# 0001 00ss ssst tttt iiii iiii iiii iiii 
:beq RSsrc, RTsrc, Rel16        is prime=4 & RSsrc & RTsrc & Rel16 {
    delayflag:1 = ( RSsrc == RTsrc ); 
    delayslot( 1 ); 
    if delayflag goto Rel16; 
}

# 0000 01ss sss0 0001 iiii iiii iiii iiii 
:bgez RSsrc, Rel16              is prime=1 & cond=1 & RSsrc & Rel16 {
    delayflag:1 = ( RSsrc s>= 0 ); 
    delayslot( 1 ); 
    if delayflag goto Rel16; 
}

:bgezal RSsrc, Rel16            is prime=1 & cond=0x11 & RSsrc & Rel16 {
    ra = inst_next; 
    delayflag:1 = ( RSsrc s>= 0 ); 
    delayslot( 1 ); 
    if (!delayflag) goto inst_next; 
    call Rel16; 
}

# 0001 11ss sss0 0000 iiii iiii iiii iiii 
:bgtz RSsrc, Rel16              is prime=7 & cond=0 & RSsrc & Rel16 {
    delayflag:1 = ( RSsrc s> 0 ); 
    delayslot( 1 ); 
    if delayflag goto Rel16; 
} 
# 0001 10ss sss0 0000 iiii iiii iiii iiii 
:blez RSsrc, Rel16              is prime=6 & cond=0 & RSsrc & Rel16 {
    delayflag:1 = ( RSsrc s<= 0 ); 
    delayslot( 1 ); 
    if delayflag goto Rel16; 
}

# 0000 01ss sss0 0000 iiii iiii iiii iiii 
:bltz RSsrc, Rel16              is prime=1 & cond=0 & RSsrc & Rel16 {
    delayflag:1 = ( RSsrc s< 0 ); 
    delayslot( 1 ); 
    if delayflag goto Rel16; 
}

# 0000 01ss sss1 0000 iiii iiii iiii iiii
:bltzal RSsrc, Rel16            is prime=1 & cond=0x10 & RSsrc & Rel16 {
    ra = inst_next; 
    delayflag:1 = ( RSsrc s< 0 ); 
    delayslot( 1 ); 
    if (!delayflag) goto inst_next; 
    call Rel16; 
}

# 0001 01ss ssst tttt iiii iiii iiii iiii 
:bne RSsrc, RTsrc, Rel16        is prime=5 & RSsrc & RTsrc & Rel16 {
    delayflag:1 = ( RSsrc != RTsrc ); 
    delayslot( 1 ); 
    if delayflag goto Rel16; 
}

# 0000 00cc cccc cccc cccc cccc cc00 1101
:break breakcode                is prime=0 & fct=0xD & breakcode {
    tmp:4=breakcode; 
    trap(tmp); 
}

:cfc0 RT, RD0                is prime=0x10 & copop=2 & RT & RD0 & bigfunct=0 {
    RT = RD0:4;
}

# 0100 1000 010t tttt ssss s000 0000 0000
:cfc2 RT, immed                 is prime=0x12 & copop=2 & RT & immed {
    tmp:4 = getCopControlWord( 2:1, immed:4 );
    RT = tmp;
}

# Special case of ADDU
# 0000 0000 0000 0000 dddd d000 0010 0001
:clear RD                       is prime=0 & fct=0x21 & rs=0 & rt=0 & RD & sa=0    {
    RD = 0; 
}

# 0100 101c cccc cccc cccc cccc cccc cccc
:cop2 cofun                     is prime=0x12 & bit25=1 & cofun {
    arg:4 = cofun;
    copFunction(2:1, arg);
}

:ctc0 RTsrc, RD0                is prime=0x10 & copop=6 & RTsrc & RD0 & bigfunct=0 {
    RD0 = RTsrc;
}

# 0100 1000 110t tttt iiii iiii iiii iiii
:ctc2 RTsrc, immed              is prime=0x12 & copop=6 & RTsrc & immed {
    setCopControlWord( 2:1, immed:4, RTsrc );
}

# 0000 00ss ssst tttt 0000 0000 0001 1010
:div RS32src, RT32src               is prime=0 & fct=0x1A & RS32src & RT32src & rd=0 & sa=0 {
    lo = RS32src s/ RT32src; 
    hi = RS32src s% RT32src; 
}
# 0000 00ss ssst tttt 0000 0000 0001 1011
:divu RS32src, RT32src              is prime=0 & fct=0x1B & RS32src & RT32src & rd=0 & sa=0 {
    lo = RS32src / RT32src; 
    hi = RS32src % RT32src;   
}

# MIPS R3000 and prior only, replaced with ERET in R4000 and later
# 0100 0010 0000 0000 0000 0000 0001 0000
:rfe                           is prime=0x10 & fct=0x10 & bit25=1 & copfill=0  {
    local currentStatus = Status;
    Status = (currentStatus & 0xfffffff0) | ((currentStatus & 0x3c) >> 2);
}

# 0000 10aa aaaa aaaa aaaa aaaa aaaa aaaa
:j Abs26                        is prime=2 & Abs26 {
    delayslot( 1 ); 
    goto Abs26; 
}

# 0000 11aa aaaa aaaa aaaa aaaa aaaa aaaa
:jal Abs26                      is prime=3 & Abs26 {
    ra = inst_next; 
    delayslot( 1 ); 
    call Abs26; 
}

# 0000 00ss sss0 0000 dddd dhhh hh00 1001
:jalr RD, RSsrc                 is prime=0 & fct=9 & RSsrc & rt=0 & RD {
    RD = inst_next;
    delayslot( 1 );
	tmp:4 = 0;
    tmp = RSsrc;
    call [tmp];     
}

:jalr RSsrc                     is prime=0 & fct=9 & RSsrc & rt=0 & rd=0x1F {
    ra = inst_next; 
    delayslot( 1 ); 
	tmp:4 = 0;
	tmp = RSsrc;
    call [tmp];     
}

# 0000 00ss sss0 0000 0000 0hhh hh00 1000
:jr RSsrc                       is prime=0 & fct=8 & RSsrc & rt=0 & rd=0 {
    delayslot(1); 
 	tmp:4 = 0;
	tmp = RSsrc;
    goto [tmp]; 
}

# Special case of JR
# 0000 0011 1110 0000 0000 0hhh hh00 1000
:jr ra                           is prime=0 & fct=8 & rs=0x1F & ra & rt=0 & rd=0 & sa=0    {
    delayslot(1); 
    return[ra]; 
}

# 1000 00bb bbbt tttt iiii iiii iiii iiii
:lb RT, OFF_BASE                is prime=0x20 & OFF_BASE & RT {
    RT = sext(*[ram]:1 OFF_BASE);  
}

# 1001 00bb bbbt tttt iiii iiii iiii iiii
:lbu RT, OFF_BASE               is prime=0x24 & OFF_BASE & RT {
    RT = zext( *[ram]:1 OFF_BASE );
}

# 1000 01bb bbbt tttt iiii iiii iiii iiii
:lh RT, OFF_BASE                is prime=0x21 & OFF_BASE & RT {
    RT = sext( *[ram]:2 OFF_BASE );
}

# 1001 01bb bbbt tttt iiii iiii iiii iiii
:lhu RT, OFF_BASE               is prime=0x25 & OFF_BASE & RT {
    RT =  zext( *[ram]:2 OFF_BASE ); 
}

# 0011 1100 000t tttt iiii iiii iiii iiii
:lui RT, immed                  is prime=0xF & rs=0 & RT & immed {
    tmp:4 = immed << 16;
    RT = tmp; 
}

# 1000 11bb bbbt tttt iiii iiii iiii iiii
:lw RT, OFF_BASE                is prime=0x23 & OFF_BASE & RT {
    RT = *[ram]:4 OFF_BASE;
}

# 1100 10bb bbbt tttt iiii iiii iiii iiii
:lwc2 rt, OFF_BASE              is prime=0x32 & OFF_BASE & rt {
    setCopReg( 2:1, rt, *[ram]:4 OFF_BASE );    
}

:lwl RT, OFF_BASE               is prime=0x22 & OFF_BASE & RT & RTsrc {
    shft:4 = OFF_BASE & 0x3; 
    addr:4 = OFF_BASE - shft; 
    valOrig:4 = RTsrc:4 & (0xffffffff >> ((shft+1)* 8));
    valLoad:4 = *(addr) << ((3-shft) * 8);     
    RT = valLoad | valOrig;
}

# 1001 10bb bbbt tttt iiii iiii iiii iiii
:lwr RT, OFF_BASE               is prime=0x26 & OFF_BASE & RT & RTsrc {
    shft:4 = OFF_BASE & 0x3; 
    addr:4 = OFF_BASE - shft; 
    valOrig:4 = RTsrc:4 & (0xffffffff << ((4-shft)* 8));
    valLoad:4 = *(addr) >> (shft * 8);
    RT = valOrig | valLoad;
}

# lwl and lwr almost always come in pairs. 
# When the analyzer does finds a matching lwl/lwr pair, the pcode is simplified so that 
# lwl does all the loading while lwr is a no-op
:lwl RT, OFF_BASE               is prime=0x22 & OFF_BASE & RT & PAIR_INSTRUCTION_FLAG=1 [ PAIR_INSTRUCTION_FLAG = 1; globalset(inst_next, PAIR_INSTRUCTION_FLAG);] {
}
:lwr RT, OFF_BASE               is prime=0x26 & OFF_BASE & RT & PAIR_INSTRUCTION_FLAG=1 [ PAIR_INSTRUCTION_FLAG = 0; ] {
    RT = *[ram]:4 OFF_BASE;
}


# 0100 0000 000t tttt dddd d000 0000 0sss
:mfc0 RT, RD0                   is prime=0x10 & copop=0 & RT & RD0 & bigfunct=0 {
    RT = RD0:4;
}

# 0100 1000 000t tttt iiii iiii iiii iiii
:mfc2 RT, immed                 is prime=0x12 & copop=0 & RT & immed {
    tmp:4 = getCopReg(2:1, immed:4);
    RT = tmp;
}

# Special case of ADDIU
# 0010 0100 000t tttt iiii iiii iiii iiii
:li RT, simmed                is prime=9 & rs=0 & RT & simmed            {
    RT = simmed;
}

# 0000 0000 0aa0 0000 dddd d000 0001 0000
:mfhi RD                        is prime=0 & fct=0x10 & RD & zero5=0 & zero1620=0 & zero2325=0 & acf=0 & acfhi {
    RD = acfhi;
}

# 0000 0000 0aa0 0000 dddd d000 0001 0010
:mflo RD                        is prime=0 & fct=0x12 & RD & zero5=0 & zero1620=0 & zero2325=0 & acf=0 & acflo {
    RD = acflo;
}

# Special case of ADDU
# 0000 0000 000t tttt dddd d000 0010 0001
:move RD, RTsrc                 is prime=0 & fct=0x21 & rs=0 & RD & RTsrc & sa=0    {
    RD = RTsrc;
}

# Special case of ADDU
# 0000 00ss sss0 0000 dddd d000 0010 0001
:move RD, RSsrc                 is prime=0 & fct=0x21 & RSsrc & rt=0 & RD & sa=0    {
    RD = RSsrc; 
}

# 0100 0000 100t tttt dddd d000 0000 0sss
:mtc0 RTsrc, RD0                is prime=0x10 & copop=4 & RTsrc & RD0 & bigfunct=0 {
	setCopReg(0:1, RD0, RTsrc); 
}

# 0100 1000 100t tttt iiii iiii iiii iiii
:mtc2 RTsrc, immed              is prime=0x12 & copop=4 & RTsrc & immed {
    setCopReg(2:1, immed:4, RTsrc);
}

# 0000 00ss sss0 0000 000a a000 0001 0001
:mthi RSsrc                     is prime=0 & fct=0x11 & RSsrc & zero5=0 & zero1320=0 & ac=0 & achi {
    achi = RSsrc;
}

# 0000 00ss sss0 0000 000a a000 0001 0011
:mtlo RSsrc                     is prime=0 & fct=0x13 & RSsrc & zero5=0 & zero1320=0 & ac=0 & aclo {
    aclo = RSsrc;
}

# 0000 00ss ssst tttt 000a a000 0001 1000
:mult RS32src, RT32src              is prime=0 & fct=0x18 & RS32src & RT32src & zero5=0 & zero1315=0 & aclo & achi {
    tmp1:8 = sext( RS32src );
    tmp2:8 = sext( RT32src );
    prod:8 = tmp1 * tmp2;
    aclo = prod:4;
    prod = prod >> 32;
    achi = prod:4;
}

# 0000 00ss ssst tttt 000a a000 0001 1001
:multu RS32src, RT32src             is prime=0 & fct=0x19 & RS32src & RT32src & zero5=0 & zero1315=0 & aclo & achi {
    tmp1:8 = zext( RS32src );
    tmp2:8 = zext( RT32src );
    prod:8 = tmp1 * tmp2;
    aclo = prod:4;
    prod = prod >> 32;
    achi = prod:4;
}

:nal             				is prime=1 & cond=0x10 & zero21=0 {
	delayslot(1);
	ra = inst_next;
} 

# 0000 0000 0000 0000 0000 0000 0000 0000 
:nop                            is prime=0 & rs=0 & rt=0 & rd=0 & sa=0 & fct=0  {
}

# 0000 00ss ssst tttt dddd d000 0010 0111
:nor RD, RSsrc, RTsrc           is prime=0 & fct=0x27 & RSsrc & RTsrc & RD & sa=0 {
    RD = ~(RSsrc | RTsrc); 
}
# 0000 00ss ssst tttt dddd d000 0010 0101
:or RD, RSsrc, RTsrc            is prime=0 & fct=0x25 & RSsrc & RTsrc & RD & sa=0 {
    RD = RSsrc | RTsrc; 
}
# 0011 01ss ssst tttt iiii iiii iiii iiii
:ori RT, RSsrc, immed           is prime=0xD & RSsrc & RT & immed  {
    RT = RSsrc | immed; 
}

# 1010 00bb bbbt tttt iiii iiii iiii iiii
:sb RTsrc, OFF_BASE             is prime=0x28 & OFF_BASE & RTsrc {
    *[ram]:1 OFF_BASE = RTsrc:1;
}

# 1010 01bb bbbt tttt iiii iiii iiii iiii
:sh RTsrc, OFF_BASE             is prime=0x29 & OFF_BASE & RTsrc {
    *[ram]:2 OFF_BASE = RTsrc:2;  
}

# 0000 0000 000t tttt dddd daaa aa00 0000
:sll RD32, RT32src, sa              is prime=0 & fct=0 & rs=0 & RD32 & RT32src & sa & RD {
    RD32 = RT32src << sa;
}
# 0000 00ss ssst tttt dddd d000 0000 0100
:sllv RD32, RT32src, RS32src          is prime=0 & fct=4 & RS32src & RT32src & RD32 & sa=0 & RD {
    shift:4 = RS32src & 0x1f;
    RD32 = RT32src << shift;
}
# 0000 00ss ssst tttt dddd d000 0010 1010
:slt RD, RSsrc, RTsrc           is prime=0 & fct=0x2A & RSsrc & RTsrc & RD & sa=0 {
    RD = zext( RSsrc s< RTsrc ); 
}
# 0010 10ss ssst tttt iiii iiii iiii iiii
:slti RT, RSsrc, simmed         is prime=10 & RSsrc & RT & simmed {
    RT = zext( RSsrc s< simmed ); 
}
# 0010 11ss ssst tttt iiii iiii iiii iiii
:sltiu RT, RSsrc, simmed        is prime=0xB & RSsrc & RT & simmed {
    RT = zext( RSsrc < simmed ); 
}
# 0000 00ss ssst tttt dddd d000 0010 1011
:sltu RD, RSsrc, RTsrc          is prime=0 & fct=0x2B & RSsrc & RTsrc & RD & sa=0 {
    RD = zext( RSsrc < RTsrc ); 
}

# 0000 0000 000t tttt dddd daaa aa00 0011
:sra RD32, RT32src, sa              is prime=0 & fct=3 & rs=0 & RT32src & RD32 & sa & RD {
    RD32 = RT32src s>> sa;
}
# 0000 00ss ssst tttt dddd d000 0000 0111
:srav RD32, RT32src, RS32src          is prime=0 & fct=7 & RS32src & RT32src & RD32 & sa=0 & RD {
    shift:4 = RS32src & 0x1f;
    RD32 = RT32src s>> shift;
}
# 0000 0000 000t tttt dddd daaa aa00 0010
:srl RD32, RT32src, sa              is prime=0 & fct=2 & rs=0 & RT32src & RD32 & sa & RD {
    RD32 = RT32src >> sa; 
}
# 0000 00ss ssst tttt dddd d000 0000 0110
:srlv RD32, RT32src, RS32src          is prime=0 & fct=6 & RS32src & RT32src & RD32 & sa=0 & RD {
    shift:4 = RS32src & 0x1f;
    RD32 = RT32src >> shift; 
}

# 0000 00ss ssst tttt dddd d000 0010 0010                           
:sub RD32, RS32src, RT32src           is prime=0 & fct=0x22 & RS32src & RT32src & RD32 & sa=0 & RD {
    RD32 = RS32src - RT32src; 
}
# 0000 00ss ssst tttt dddd d000 0010 0011
:subu RD32, RS32src, RT32src          is prime=0 & fct=0x23 & RS32src & RT32src & RD32 & sa=0 & RD {
    RD32 = RS32src - RT32src;
}

# 1010 11bb bbbt tttt iiii iiii iiii iiii
:sw RTsrc, OFF_BASE             is prime=0x2B & OFF_BASE & RTsrc {
    *[ram]:4 OFF_BASE = RTsrc:4;    
}

# 1110 10bb bbbt tttt iiii iiii iiii iiii
:swc2 hint, OFF_BASE              is prime=0x3A & OFF_BASE & hint {
	tmp:4 = getCopReg(2:1, hint:4);
    *[ram]:4 OFF_BASE = tmp; 
}

# 1010 10bb bbbt tttt iiii iiii iiii iiii
:swl RTsrc, OFF_BASE            is prime=0x2A & OFF_BASE & RTsrc {
    tmpRT:4 = RTsrc:4;  
    shft:4 = OFF_BASE & 0x3; 
    addr:4 = OFF_BASE - shft; 
    valOrig:4 = *(addr) & (0xffffffff << ((shft+1) * 8));
    valStore:4 = tmpRT >> ((3-shft) * 8);
    *(addr) = valOrig | valStore; 
}
# 1011 10bb bbbt tttt iiii iiii iiii iiii
:swr RTsrc, OFF_BASE            is prime=0x2E & OFF_BASE & RTsrc {
    tmpRT:4 = RTsrc:4;
    shft:4 = OFF_BASE & 0x3;      
    addr:4 = OFF_BASE - shft; 
    valOrig:4 = *(addr) & (0xffffffff >> ((4-shft) * 8));
    valStore:4 = tmpRT << (shft*8);
    *(addr) = valOrig | valStore;
}

# When the analyzer finds a matching swl/swr pair, the pcode is simplified so that 
# swl does all the storing while swr is a no-op
:swl RTsrc, OFF_BASE            is prime=0x2A & OFF_BASE & RTsrc & PAIR_INSTRUCTION_FLAG=1 [ PAIR_INSTRUCTION_FLAG = 1; globalset(inst_next, PAIR_INSTRUCTION_FLAG);] {
}
:swr RTsrc, OFF_BASE            is prime=0x2E & OFF_BASE & RTsrc & PAIR_INSTRUCTION_FLAG=1 [ PAIR_INSTRUCTION_FLAG = 0; ]{
    *[ram]:4 OFF_BASE = RTsrc:4;
}

# 0000 00cc cccc cccc cccc cccc cc00 1100
:syscall                        is prime=0 & fct=0xC & breakcode {
    tmp:4=breakcode; 
    syscall(tmp); 
}

# 0000 00ss ssst tttt dddd d000 0010 0110
:xor RD, RSsrc, RTsrc           is prime=0 & fct=0x26 & RSsrc & RTsrc & RD & sa=0 {
    RD = RSsrc ^ RTsrc; 
}
# 0011 10ss ssst tttt iiii iiii iiii iiii 
:xori RT, RSsrc, immed          is prime=0xE & RSsrc & RT & immed {
    RT = RSsrc ^ immed; 
}
